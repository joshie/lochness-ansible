#!/usr/bin/python2

from __future__ import print_function

import httplib
import json
import os
import shutil
import subprocess
import sys
import tempfile


def warn(msg, **kwargs):
    kvs = []
    for k, v in kwargs.iteritems():
        kvs.append('%s=%s' % (k, v))

    print("WARN", msg, " ".join(kvs))


def getID():
    if len(sys.argv) == 2:
        return sys.argv[1]

    for name in ('/etc/machine_id', '/etc/machine-id', '/sys/class/dmi/id/product_uuid'):
        if os.path.exists(name):
            with open(name) as f:
                id = f.readline().strip()

            if id is not '':
                return id

    return ''


def boolize(s):
    return s.lower() in ('1', 'true', 'yes', 'enabled', 'enable', 'doit')


def etcdget(url):
    url = '/'.join(['/v2/keys/lochness', url])
    conn.request('GET', url)
    response = conn.getresponse()
    status = response.status
    resp = json.load(response)
    return status, resp


id = getID()
if id is '':
    print('need an ID!!!')
    exit(-5)


config = {'machine_id': id}
conn = httplib.HTTPConnection('localhost:4001')
adir = tempfile.mkdtemp()
os.mkdir(adir + '/host_vars')


with open(adir + '/hosts', 'w') as f:
    f.write('%s ansible_connection=local\n' % id)


status, resp = etcdget('config?recursive=true')
if status != 200:
    warn('failed to get config', error=resp['message'])
else:
    nodes = resp['node']['nodes']
    for node in nodes:
        key = 'lochness_%s' % node['key'].split('/')[-1]
        config[key] = '"%s"' % node['value']


services = ('tftpd', 'dhcpd', 'dhcrelay', 'dns', 'enfield', 'logserver')
for service in services:
    status, resp = etcdget('hypervisors/%s/config/%s' % (id, service))

    enable = 'false'
    if status != 200:
        warn('failed to get service config', service=service, error=resp['message'])
    else:
        enabled = boolize(resp['node']['value'])
        if enabled is True:
            enable = 'true'

    config[service+'_enable'] = enable


with open(adir + '/host_vars/' + id, 'w+') as f:
    f.write('---\n')
    for k, v in config.iteritems():
        f.write('%s: %s\n' % (k, v))


args = ['ansible-playbook',
        '--inventory', adir + '/hosts',
        '--connection=local',
        './lochness.yml']
ret = subprocess.call(args)
if ret == 0:
    shutil.rmtree(adir)
else:
    warn("ansible-playbook returned an error", exit_status=ret)

exit(ret)
